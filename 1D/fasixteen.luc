module fasixteen (
    input a[16],      // 16-bit input A
    input b[16],      // 16-bit input B
    input alufn[4],   // last 4 bits of 6-bit input ALUFN
    output z,         // output z
    output v,         // output v
    output n,         // output n
    output s[16]      // 16-bit output of the adder unit 
  ) {
  
  sig out[16],mout[32];

  always {
    //choosing between MUL / ADD /  SUB / NEGATE / DIVISION
    // LOOKS AT THE LSB OF THE ALUFN TO CHOOSE WHETHER IT IS MULTIPLICATION / DIVISION / NEGATE
    case(alufn[0]) {
      
      b0: 
          z = b0;
          v = b0;
          n = b0; 
        
         if (alufn[1]) {                         //multiplication b000010 
          mout = $signed(a) * $signed(b);
          out = mout[15:0];                      //for multiplication of signed numbers 
          
          // CHECKING FOR MULTIPLICATION OVERFLOW 
          if ($signed(a) > 32767 / $signed(b)) { 
            v=1;
          }
          else {
           v=0;
          }
        }
        
         else if (alufn[2]){                     //division b000100
          out = $signed(a) / $signed(b);         //for division of signed numbers   
                                               
        }
          
          else if (alufn[3]){                     //negate b001000
          out = -$signed(a);                      //for negate of signed numbers 

        }

          
        else {                                    //addition 
          out = a + b;                                                         
          z = ~|out;                                                           
          v = (((a[15])&(b[15])&(~out[15])) | ((~a[15])&(~b[15])&(out[15])));  
          n = out[15];  
        }  
        
      // IF LSB IS 1 THEN IT IS  SUBTRACTION  
        
      b1:                                        //subtraction 
        if(alufn[1]==0){
          out = a - b;                                                        
          z = ~|out;                                                          
          v = (((a[15])&(~b[15])&(~out[15])) | ((~a[15])&(b[15])&(out[15])));  
          n = out[15];
        }
        
        //modulo
        else if(alufn[1]==1){
        
          if( b != 0 ){
            out = a - ((a/b)*b);
            z = ~|out;                                                          
            v = (((a[15])&(~b[15])&(~out[15])) | ((~a[15])&(b[15])&(out[15])));  
            n = out[15];
          } else {
            out = a;
            z = ~|out;                                                          
            v = (((a[15])&(~b[15])&(~out[15])) | ((~a[15])&(b[15])&(out[15])));  
            n = out[15];
          }
          
        }
          
            
      default:                                                               
        out = 16b0;
        z = b0;
        v = b0;
        n = b0;
    }
    
    if(alufn[1:0] == b11){
          if( b != 0 ){
            out = a - ((a/b)*b);
            z = ~|out;                                                          
            v = (((a[15])&(~b[15])&(~out[15])) | ((~a[15])&(b[15])&(out[15])));  
            n = out[15];
          } else {
            out = a;
            z = ~|out;                                                          
            v = (((a[15])&(~b[15])&(~out[15])) | ((~a[15])&(b[15])&(out[15])));  
            n = out[15];
          }
    }

    s = out[15:0];  
  }
}
