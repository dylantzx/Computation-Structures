// Parenthesis matcher Turing Machine
// test tapes and checkoff information
checkoff "10.1.3.26/checkoff/50002assignment.doit" "Lab #4" 1103641864

// halt with symbol "1" when parens balance
// halt with symbol "0" when parens do not balance
// head to be positioned over "0" or "1" (end state)
// 2 states turing machine

states A B
symbols ( ) 0 1 { [

// Tests

tape test1 (
result1 test1 0

tape test2 )
result1 test2 0

tape test3 ( )
result1 test3 1

tape test4 ) (
result1 test4 0

tape test5 ( ) ( ) ( ( ( ) ) ( ) ) ) ( ) 
result1 test5 0

tape test6 ( ) ( ( ( ) ( ( ( ) ) ( ) ) )
result1 test6 0

tape test7 ( ) ( ( ) ( ( ( ) ) ( ) ) )
result1 test7 1

// Explanation
// State A:
// Mark the first ( with a { , go to state B, and move tape left
// If 0 is found, a match is found, mark with 1, stay in same state, move tape left, look for new pair
// If - is found, there is a balanced number of parenthesis, halt
// If a ) is found, immediately halt as you cannot start with a )

// State B:
// Look for )
// If ( is found, mark ( with [, stay in same state, and move tape left
// If ) is found, mark ) with 0, stay in same state, and move tape right
// If { is found, this is the beginning parenthesis, so mark { with 1, go to state A, move tape left 
// If [ is found, a matching ( is found, mark as 1,  stay in same state, move tape left
// If 0 is found, a match is found, mark as 1, stay in same state, move tape left, look for new pair
// If 1 is found, not matched with ), mark as 0, stay in same state, move tape right
// If - is found, there is unbalanced number of parenthesis, halt

//	old	R	new	W	M
action	 A	(	 B	{	l
action	 A	1	 A	0	r
action	 A	0	 A	1	l
action	 A	)	*halt*	0	-
action	 A	-	*halt*	1	-
	
action	 B	(	 B	[	l
action	 B	)	 B	0	r
action	 B	[	 B	1	l
action	 B 	{	 A	1	l
action	 B	1	 B	0	r
action	 B	0	 B	1	l
action	 B	-	*halt*	0	-

