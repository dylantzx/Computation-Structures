* 2-input NAND: inputs are A and B, output is Z
.subckt nand2 a b z
MPD1 z a 1 0 NENH sw=8 sl=1
MPD2 1 b 0 0 NENH sw=8 sl=1
MPU1 z a vdd vdd PENH sw=8 sl=1
MPU2 z b vdd vdd PENH sw=8 sl=1
.ends

* 2-input NOR: inputs are A and B, output is Z
.subckt nor2 a b z
MPD1 z a 0 0 NENH sw=8 sl=1
MPD2 z b 0 0 NENH sw=8 sl=1
MPU1 z a 1 vdd PENH sw=8 sl=1
MPU2 1 b vdd vdd PENH sw=8 sl=1
.ends

* INVERTER: input is A, output is Z
.subckt inv f Z
MPD4 Z f 0 0 NENH sw=16 sl=1
MPU4 Z f vdd vdd PENH sw=16 sl=1
.ends

* 2-input XOR1: inputs are A and B, output is Z
.subckt xor2 a b z
Xnor a b p nor2
MPD1 z a n2 0 NENH sw=2 sl=1
MPD2 n2 b 0 0 NENH sw=2 sl=1
MPD3 z p 0 0 NENH sw=2 sl=1
MPU1 z p n1 vdd PENH sw=4 sl=1
MPU2 n1 a vdd vdd PENH sw=4 sl=1
MPU3 n1 b vdd vdd PENH sw=4 sl=1
.ends

* 3-input NAND: inputs are A B C, output is Z
.subckt nand3 a b c z
MPD1 z a p1 0 NENH sw=8 sl=1
MPD2 p1 b p2 0 NENH sw=8 sl=1
MPD3 p2 c 0 0 NENH sw=8 sl=1
MPU1 z a vdd vdd PENH sw=8 sl=1
MPU2 z b vdd vdd PENH sw=8 sl=1
MPU3 z c vdd vdd PENH sw=8 sl=1
.ends

* sum: inputs a b cin output is s
.subckt sum a b cin s
Xxor1 a b p1 xor2
Xxor2 p1 cin s xor2
.ends

* carryout: inputs a b cin output is cout
.subckt carryout a b cin cout
Xnand1 a cin p1 nand2
Xnand2 a b p2 nand2
Xnand3 b cin p3 nand2
Xnand4 p1 p2 p3 cout nand3
.ends
